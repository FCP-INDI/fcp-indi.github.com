Running C-PAC in the Cloud
===========================

Introduction
^^^^^^^^^^^^

An Amazon Marketplace AMI for C-PAC has been released, making it easier for researchers to use C-PAC in the cloud.  You can use the AMI to either launch a single machine for basic runs or create a high performance computing (HPC) cluster using Starcluster.  Clusters can be dynamically scaled up as your computational needs increase.  Detailed explanations of cloud computing and HPC are beyond the scope of this documentation, but we will define a few key terms before we start.  If these terms are familiar, you may skip them and proceed to later sections.

* Amazon Machine Instance (AMI) - A disk image of an operating system and any additional installed software that can be used to create a virtual machine. 

* Instance - A single running virtual machine whose initial state is based on the AMI that it is launched from.  Instances can be classified as spot instances or on-demand instances.  On-demand instances are reliably created the moment they are requested for a fixed rate.  Spot instances are created based on whether or not a bid that you set is accepted by Amazon.  They can be significantly cheaper than on-demand instances, but are not created immediately after they are requested.

* Instance Type - The hardware specification for a given instance. A list of the instance types made available by Amazon may be found `here <http://aws.amazon.com/ec2/instance-types>`_.

* Elastic Block Storage (EBS) - A form of persistent storage offered by Amazon for use with instances.

* Head Node - The primary node of a HPC cluster, which all other nodes are connected to.  The head node will run a job scheduler (such as Sun Grid Engine) to allocate jobs to the other nodes.  Jobs may also be run on the head node.

* Worker Node - A node in a HPC cluster to which tasks are delegated by the head node via a job scheduler.

* Job Scheduler - A program that can allocate computational resources in an HPC cluster to jobs based on availability and distribute jobs across nodes. The C-PAC AMI uses Sun Grid Engine (SGE) as its job scheduler.

* Job Submission Script - A shell script with a series of commands to be executed as part of the job.  Submission scripts may also include flags that activate functionality specific to the scheduler.

Creating AWS Access and Network Keys
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Before you can create a single C-PAC machine or a C-PAC HPC cluster, you must first generate credentials that will allow you to log into any AWS instance that you create.  The following steps will walk you through the process of creating all the necessary credentials and encryption keys that you will need.

#. Go to http://aws.amazon.com/console/

#. Click the `Sign in to the AWS Console` button

#. Enter your credentials: E-mail Address, Password

#. Amazon has different regions that it hosts its web services from (e.g. Oregon, Northern Virginia, Tokyo). In the upper right-hand corner there will be a region that you are logged into next to your user name. Change this to your preferred region.

#. Click on your name in the upper right corner and navigate to `Security Credentials`.  Accept the disclaimer that appears on the page.

#. Click on `Access Keys` and click on the blue `Create New Access Key` button.  Click `Download Key File` and move the resulting csv file to a safe and memorable location on your hard drive.

#. Click on the box in the upper left corner of AWS.  Click on `EC2`.  Click on `Key Pairs` in the left-hand column.

#. Click on the blue `Create Key Pair` button. Give it an appropriate name and click on the blue `Create` button.  A .pem file will now save to disk.  Move this file to a safe and memorable location on your hard drive.

#. On your local drive, open a terminal and run the following command: ``chmod 600 /path/to/pem/file``

Starting a Single C-PAC Instance via the AWS Console 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now that you have generated the access keys and a pem file, you may launch a single instance via Amazon's web interface by following the steps below.  If you are planning on processing many subjects or obtaining computationally-intensive derivatives (such as network centrality), you should consider using Starcluster instead.

#. In the left-hand column under the `INSTANCES` header in the AWS console, click `Instances`. This is a dashboard of all instances you currently have running in the AWS cloud. Click the blue `Launch Instance` button.

#. On the left-hand side of the new page, click on the `Amazon Marketplace` tab and search `c-pac` in the search text box.

#. Click the blue `Select` button next to the C-PAC AMI.  Click the blue `Continue` button on the next screen.

#. Now choose the instance type that you would like to use.  Note that C-PAC requires at least 8 GB of RAM- the m3.xlarge instance type has 15 GB of RAM and 4 CPUs and functions well with C-PAC. To select this type, click on the `General purpose` tab and select the m3.xlarge size instance and click the `Next: Configure Instance Details` button.

#. The details page can be used to request spot instances, as well as other functionality (including VPN, VPC options). For a basic run you do not need to change anything, although you can tailor it according to your future needs. Hovering over the 'i' icons on this page will give you more insight into the options available.  When done, click `Next: Add Storage.`

#. On the storage page, you can allocate storage for your dataset. Note that the amount of space you allocate will have to encompass raw data, preprocessed data, and derivatives.  Click `Next: Tag Instance`.

#. On this page you can tag the instance with metadata (e.g., details related to the specific purpose for the instance).  Tags are key-value pairs, so any contextual data that can be encapsulated in this format can be saved. Click `Next: Configure Security Group`.

#. On this page, you can modify who has access to the instance. The AMI defaults allow remote access from anywhere. If you would like to customize security to allow only a certain set of IP addresses and users access to the instance, you can do so here. Click `Review and Launch` when you are done.

#. This final page summarizes the instance details you are about to launch. You might receive some warnings as a result of security or the instance type not being in the free tier.  These warnings can be ignored.

#. Click the `Launch` button. A dialogue box will ask you to choose a key pair for the instance. Every instance requires a key pair in order for you to securely log in and use it. Change the top drop down menu bar to `Choose an existing key pair` and select the key pair you created in the `Creating AWS Access and Network Keys` section in the other drop down menu.  Check the acknowledgement check box and click the blue `Launch Instances` button. 

#. You can click the `View Instances` blue button on the lower right of the page after to watch your new instance start up in the instance console.

#. When the `Instance State` column reads `running` and the `Status Checks` column reads `2/2` you can access and use the instance. Click on the instance's row.  In the bottom pane, find the `Public DNS` field under the `Description` tab and save the field value to your clipboard.

There are now two different means of accessing the instance.  Either through X2Go (a desktop GUI-based session) or through ssh (a command line session).

ssh
'''

#. Open a terminal and type ``ssh -i /path/to/pem/file ubuntu@<public_dns>``.  

#. Type `yes` when asked if you trust the source.

X2Go
''''

#. Install the X2Go client using the instructions `here <http://wiki.x2go.org/doku.php/doc:installation:x2goclient>`_. 

#. Open X2go and create a new session. 

#. For `Host:`, enter the Public DNS from earlier.

#. For `Login:` enter `ubuntu`. 

#. `SSH port:` should be `22`. 

#. For `Use RSA/DSA key for ssh connection:`, select the key you generated for the instance. 

#. Select `LXDE` for `Session` and click `OK`.

When you are done, your session configuration should look similar to the following:

.. figure:: /_images/cloud_x2go.png


Starting a C-PAC HPC Cluster via Starcluster
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Starcluster is suggested for more sophisticated C-PAC runs.  Using Starcluster, you can parallelize your analyses by distributing subjects across multiple nodes in a HPC cluster.  The following section describes how to install and configure Starcluster to work with C-PAC, dynamically add nodes to your cluster and leverage C-PAC's grid functionality.

Installing Starcluster
''''''''''''''''''''''

If you have pip installed, installation of Starcluster should be as simple as:

.. code-block:: bash

    pip install starcluster

If you do not have pip installed, see the `Official Starcluster Installation Instructions <http://star.mit.edu/cluster/docs/latest/installation.html>`_ for alternative installation methods.

Installing the C-PAC Starcluster Plug-ins
'''''''''''''''''''''''''''''''''''''''''

The C-PAC Starcluster plug-ins configure the SGE environment that C-PAC uses and ensure that storage space is writable.  From the terminal, download the C-PAC Starcluster plug-ins and install them by running the following commands:

.. code-block:: bash

    cd /tmp
    git clone https://github.com/FCP-INDI/CPAC_CLOUD
    cd CPAC_CLOUD/sc_plugins
    mv *.py ~/.starcluster/plugins

Creating and Editing Your Configuration File
''''''''''''''''''''''''''''''''''''''''''''

Now you will need to create a Starcluster configuration file so that Starcluster can use your keys and know which instance types you would like to use.  To begin, type ``starcluster help`` and select option 2.

Fill in the AWS access keys from the CVS file that you created in the `Creating AWS Access and Network Keys` section::

    [aws info]
    AWS_ACCESS_KEY_ID = <your_key>
    AWS_SECRET_ACCESS_KEY = <your_secret_key>

You do not need to define the AWS_USER_ID field unless you want to create custom AMIs based off the C-PAC AMI.  If you would like to use a region other than us-east-1, you may specify the region here by changing ``AWS_REGION_NAME``.

Point your key definition to the pem file you generated in the `Creating AWS Access and Network Keys` section::

    [key cpac_key]
    KEY_LOCATION=/path/to/pem/file

Add the following cluster definition to your configuration file::

    [cluster cpac_cluster]
    KEYNAME = cpac_key
    PLUGINS = cpac_sge, mnt_config
    CLUSTER_SIZE = 1
    CLUSTER_SHELL = bash
    NODE_IMAGE_ID = ami-4f12f524
    MASTER_INSTANCE_TYPE = t2.medium
    NODE_INSTANCE_TYPE = c3.8xlarge

You can customize this to have additional nodes or use different instance types as per your needs.  Note that you can always add nodes later using Starcluster from the command line.  If you wish to use spot instances rather than on-demand instances, then add the following line to the cluster definition::

    SPOT = <bidding_price>

Also add the following two plug-in definitions for the C-PAC Starcluster plug-ins::

    [plugin cpac_sge]
    setup_class = cpac_sge.PEInstaller
    pe_url = https://raw.githubusercontent.com/FCP-INDI/CPAC_CLOUD/master/mpi_smp.conf

    [plugin mnt_config]
    setup_class = mnt_perm.MntPermissions

Attaching Persistent Storage to Your Cluster
''''''''''''''''''''''''''''''''''''''''''''

By default, the cluster will not have any persistent storage (i.e., all storage devices will be destroyed when the cluster terminates). A shared directory mounted at `/home` on the head node can be used across nodes. If you need more storage than what is available on the head node or if you want to keep your data after the cluster is terminated, you will need to create a new volume that can be attached to all nodes in the cluster.  To do so, begin by creating an EBS-backed volume:

.. code-block:: bash

   starcluster createvolume --shutdown-volume-host <volume_size_in_gigabytes> <region>

Type ``starcluster listvolumes`` and get the `volume-id` for the volume that you just created.  Open up your Starcluster configuration file and add the following volume definition::

    [volume cpac_volume]
    volume_id = <volume_id>
    mount_path = /mnt

Append the following line to your `cpac_cluster` definition::

    volumes = cpac_volume

Starting the C-PAC Head Node
'''''''''''''''''''''''''''''

To start up the head node on your C-PAC HPC cluster, use the following Starcluster command (with substitutions where necessary):

.. code-block:: bash

    starcluster start -c cpac_cluster <instance_name>

Adding Additional Nodes
'''''''''''''''''''''''

To add additional nodes to your C-PAC HPC cluster, use the following Starcluster command (with substitutions where necessary):

.. code-block:: bash

    starcluster addnode -n <number_of_nodes_to_add> <instance_name>

Accessing the Head Node
'''''''''''''''''''''''

If you wish to use the C-PAC GUI while accessing the head node, type the following command:

.. code-block:: bash

    starcluster sshmaster -X -u ubuntu <instance_name>

If you only wish to access the command line interface, you may omit the `-X` flag:

.. code-block:: bash

    starcluster sshmaster -u ubuntu <instance_name>

Using C-PAC to Submit an SGE Job
'''''''''''''''''''''''''''''''''

C-PAC performs the heavy lifting of creating an SGE job submission script and submitting it to the SGE job scheduler seamlessly.  There are two ways to accomplish this- either through C-PAC's GUI or from the command line by editing your pipeline configuration file with a text editor and executing a run with `cpac_run.py`.

Via the C-PAC GUI: 

#. Type `cpac_gui` while in the shell on the head node.
#. From the main C-PAC window, load your pipeline configuration file. 
#. Under `Computer Settings` in the left pane, change `Run C-PAC on Grid` to True.  Change `SGE Parallel Environment` to `mpi_smp`.

When you are done, the window should look like this:

.. figure:: /_images/cloud_gui_sge.png

Save the pipeline configuration file and run an analysis as you would normally. 

Via the shell: 

#. Open your pipeline configuration YAML file in your preferred text editor.
#. Change the ``runOnGrid`` field to a value of ``True``.
#. Make sure that the ``resourceManager`` field is set to ``SGE``.
#. Set the ``parallelEnvironment`` field to ``mpi_smp``.
#. Exit the text editor and download ``cpac_run.py`` from the C-PAC Github repo by typing ``wget https://raw.githubusercontent.com/FCP-INDI/C-PAC/master/scripts/cpac_run.py``.
#. Make sure that you are in the directory that `cpac_run.py` was downloaded to.  Execute the following command to run your pipeline.

.. code-block:: bash

    python cpac_run.py /path/to/pipeline_config.yml /path/to/CPAC_subject_list.yml

Checking on SGE Jobs
'''''''''''''''''''''

Once you are done submitting the job, you can check its status by typing `qstat`.  This command will produce output that looks similar to the following::

    job-ID  prior   name       user         state submit/start at     queue                          slots ja-task-ID 
    -----------------------------------------------------------------------------------------------------------------
          1 0.55500 submit_201 ubuntu       r     06/05/2015 20:42:13 all.q@master                       1 1
          1 0.55500 submit_201 ubuntu       r     06/05/2015 20:42:13 all.q@node001                      1 2
          2 0.55500 submit_201 ubuntu       r     06/05/2015 20:42:58 all.q@node002                      1 1
          2 0.00000 submit_201 ubuntu       qw    06/05/2015 20:42:47                                    1 2

The `job-ID` is a number assigned to your job when it is submitted to the scheduler.  The `state` of the job can be represented by one of several values: `r` means that the job is running, `qw` means that the job is queued and waiting, and `E` means that an error has occurred. The `queue` column indicates on which nodes of your cluster the C-PAC job is being executed.

If an error has occurred on any of the nodes while your pipeline executes, you should check the `cluster_temp_files` directory that was created in the directory from which you ran C-PAC.  This will contain copies of the job submission scripts that C-PAC generated to start your job.  It will also contain files containing the standard out and error messages for a given job.  You should check these first to determine what may have caused the error.  If these files do not help you determine what may have caused the error, feel free to ask for :doc:`help </help>` on the C-PAC forum. 

Terminating a Starcluster Instance
''''''''''''''''''''''''''''''''''

When you are done and have exited from your cluster, the following command will stop the cluster:

.. code-block:: bash

    starcluster terminate <instance_name>

If you receive an error from Starcluster while trying to terminate the instance, the following command will force Starcluster to terminate your cluster:

.. code-block:: bash

    starcluster terminate -f <instance_name>

**Warning:** If you are not using persistent storage (see `Attaching Persistent Storage to Your Cluster`) then all of your data will be lost upon termination of the cluster.  You will need to copy your data to another drive if you wish to keep it.

Additional Links
^^^^^^^^^^^^^^^^

* `The StarCluster User Manual <http://star.mit.edu/cluster/docs/latest/manual/index.html>`_
* `The Sun Grid Engine User Guide <http://www.csb.yale.edu/userguides/sysresource/batch/doc/UserGuide_6.1.pdf>`_
* `Getting Started with AWS <http://docs.aws.amazon.com/gettingstarted/latest/awsgsg-intro/gsg-aws-intro.html>`_
