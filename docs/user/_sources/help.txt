Troubleshooting and Help
------------------------

C-PAC is alpha software, which means that it is still under active development and has not yet undergone large-scale testing. As such, although we have done our best to ensure a stable pipeline, there may still be a few bugs that we did not catch.
 
If you find a bug, or would like to request a new feature please visit the `GitHub Issues page for CPAC <https://github.com/FCP-INDI/C-PAC/issues>`_.

If you have a question that is not answered in the User Guide or encounter an issue not covered in the `Common Issues and Solutions` section below, you should submit it to the `C-PAC user forum <https://groups.google.com/forum/#!forum/cpax_forum>`_.

Viewing Crash Files
^^^^^^^^^^^^^^^^^^^
Crash files are generated by Nipype, and can be viewed from the terminal by typing:

.. code-block:: bash

    nipype_display_crash crash-file.pklz


Where :file:`crash-file.pklz` is the name of the crash file you wish to view.

Common Issues and Solutions
^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. My run is crashing with the crash files indicating a memory error.  What is going on?

	This issue often occurs when scans are resampled to a higher resolution.  This is because functional images, the template that you are resampling to, and the resulting generated image are all loaded into memory at various points in the C-PAC pipeline.  Typically these images are compressed, but they will be uncompressed when loaded.  If the amount of memory required to load the images exceeds the amount of memory available, C-PAC will crash.  

	For instance, suppose you are resampling a 50 MB (100 MB uncompressed) resting-state scan with 3 mm isotropic voxels to a 3 MB (15 MB uncompressed) 1 mm template. By dividing the voxel volume for the original resting state scan by the voxel volume for the template, you can determine that the voxel count of the resampled resting-state scan will be 27 times greater. Therefore, if you multiply the uncompressed file size by 27 you can estimate that the resampled scan alone will take up 2.7 GB of space. You will need at least this much RAM for C-PAC to load the scan.  If you are running multiple subjects simultaneously, you would need to multiply this estimate by the number of subjects.  Note that the template, original image, and any other open applications will also have their own memory requirements, so the estimate would be closer to 2.8 GB per subject plus however much RAM is used before C-PAC is started (assuming no new applications are started mid-run).

	To avoid this error, you will need to either get more RAM, run fewer subjects at once, or consider downsampling your template to a lower resolution.

#. I'm trying to run the C-PAC GUI on a Mac with Anaconda, but I am being told that I need a "Framework build of python".  What is wrong with Anaconda?

	Good news: nothing is wrong with Anaconda!  This error comes up because wx (the framework the C-PAC GUI is based upon) does not play well with Anaconda sometimes, but there is a fix.  Specifically, you must set your PYTHONPATH variable to point to your Anaconda environment.  To do this, add ``export PYTHONPATH=/home/<your_username>/anaconda`` to your .bash_profile file (in addition to the FSL and AFNI variables), open a fresh terminal, and type `cpac_gui`.
